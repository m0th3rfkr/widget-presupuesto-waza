{
  "meta": {
    "instanceId": "4d0bd5da0d4b78bf4a4c6b9e6e8b3c7d1f8c5d9a6b2c8e4f7a9d1c3e5f8b2a4c6e9"
  },
  "nodes": [
    {
      "parameters": {
        "path": "budget-quote",
        "options": {}
      },
      "id": "budget-webhook-node",
      "name": "Budget Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "budget-webhook-id"
    },
    {
      "parameters": {
        "jsCode": "// Process budget data with building blocks\nconst buildingBlocks = $input.json.building_blocks;\nconst config = $input.json.config;\n\n// Initialize results\nconst processed = {\n  project_name: config?.nombreProyecto || 'Proyecto Sin Nombre',\n  generated_at: new Date().toISOString(),\n  categories: {},\n  totals: { basic: 0, standard: 0, enterprise: 0 },\n  config: config || {}\n};\n\n// Process each category if building blocks exist\nif (buildingBlocks?.categories) {\n  for (const [categoryId, category] of Object.entries(buildingBlocks.categories)) {\n    const categoryData = {\n      name: category.name || categoryId,\n      items: 0,\n      hours: { basic: 0, standard: 0, enterprise: 0 },\n      costs: { basic: 0, standard: 0, enterprise: 0 }\n    };\n    \n    // Process building blocks in category\n    if (category.building_blocks) {\n      for (const [blockId, block] of Object.entries(category.building_blocks)) {\n        if (block.hours) {\n          // Get configuration values\n          const efficiency = (100 - (config?.eficienciaIA || 35)) / 100;\n          const markup = (100 + (config?.markup || 40)) / 100;\n          const aiRate = config?.tarifaIA || 300;\n          \n          // Calculate hours with AI efficiency\n          const basicHours = (block.hours.facil || 0) * efficiency;\n          const standardHours = (block.hours.intermedio || 0) * efficiency;\n          const enterpriseHours = (block.hours.complejo || 0) * efficiency;\n          \n          // Calculate costs\n          const basicCost = basicHours * aiRate * markup;\n          const standardCost = standardHours * aiRate * markup;\n          const enterpriseCost = enterpriseHours * aiRate * markup;\n          \n          // Add to category totals\n          categoryData.hours.basic += basicHours;\n          categoryData.hours.standard += standardHours;\n          categoryData.hours.enterprise += enterpriseHours;\n          \n          categoryData.costs.basic += basicCost;\n          categoryData.costs.standard += standardCost;\n          categoryData.costs.enterprise += enterpriseCost;\n          \n          categoryData.items++;\n        }\n      }\n    }\n    \n    // Add category to processed data\n    processed.categories[category.name || categoryId] = categoryData;\n    \n    // Add to overall totals\n    processed.totals.basic += categoryData.costs.basic;\n    processed.totals.standard += categoryData.costs.standard;\n    processed.totals.enterprise += categoryData.costs.enterprise;\n  }\n}\n\n// Apply project factors\nconst pmFactor = (config?.factorPM || 18) / 100;\nconst testingFactor = (config?.factorTesting || 12) / 100;\nconst contingencyFactor = (config?.factorContingencia || 20) / 100;\nconst totalFactor = pmFactor + testingFactor + contingencyFactor;\n\nprocessed.totals.basic *= (1 + totalFactor);\nprocessed.totals.standard *= (1 + totalFactor);\nprocessed.totals.enterprise *= (1 + totalFactor);\n\n// Generate output files\nconst markdown = `# Cotización ${processed.project_name}\\n\\n*Generado el ${processed.generated_at}*\\n\\n## Resumen Ejecutivo\\n\\n| Nivel | Costo Total | Descripción |\\n|-------|-------------|-------------|\\n| Básico | $${Math.round(processed.totals.basic).toLocaleString()} MXN | Implementación MVP |\\n| Estándar | $${Math.round(processed.totals.standard).toLocaleString()} MXN | Producción estable |\\n| Enterprise | $${Math.round(processed.totals.enterprise).toLocaleString()} MXN | Escalamiento masivo |\\n\\n## Configuración\\n- Eficiencia IA: ${config?.eficienciaIA || 35}%\\n- Markup: ${config?.markup || 40}%\\n- Tarifa IA: $${config?.tarifaIA || 300} MXN/hora`;\n\nconst csv = `Categoría,Items,Horas Básico,Costo Básico,Horas Estándar,Costo Estándar,Horas Enterprise,Costo Enterprise\\n${Object.entries(processed.categories).map(([name, data]) => `${name},${data.items},${data.hours.basic.toFixed(1)},${Math.round(data.costs.basic)},${data.hours.standard.toFixed(1)},${Math.round(data.costs.standard)},${data.hours.enterprise.toFixed(1)},${Math.round(data.costs.enterprise)}`).join('\\n')}\\nTOTAL,-,-,${Math.round(processed.totals.basic)},-,${Math.round(processed.totals.standard)},-,${Math.round(processed.totals.enterprise)}`;\n\nreturn {\n  status: 'success',\n  message: 'Budget processed successfully',\n  data: {\n    processed: processed,\n    markdown: markdown,\n    csv: csv,\n    filename: `cotizacion_${processed.project_name.replace(/\\s+/g, '_')}_${new Date().toISOString().slice(0, 10)}`\n  },\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "budget-processor-node",
      "name": "Budget Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    }
  ],
  "connections": {
    "Budget Webhook": {
      "main": [
        [
          {
            "node": "Budget Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "working-budget-workflow",
  "name": "Working Budget Workflow"
}